
      sampler2D _VSShadowMap;


      void VSShadowTexture(inout MicroSplatLayer o, Input i, Config config, float camDist)
      {
         #if _VSSHADOWMAP
            #if _VSSHADOWTAPNONE
               const int taps = 1;
            #elif _VSSHADOWTAPLOW
               const int taps = 4;
            #elif _VSSHADOWTAPHIGH
               const int taps = 16;
            #else
               const int taps = 8; // medium
            #endif

            const int maxTreeHeight = 64;
            // start at light and raycast back
            // offset the UVs to the end and subdivide the UV offset

            #if _MSRENDERLOOP_UNITYHD
               float3 tang = mul( i.TBN, gVSSunDirection.xyz ).xyz;
            #else
               float3 t2w0 = WorldNormalVector(i, float3(1,0,0));
               float3 t2w1 = WorldNormalVector(i, float3(0,1,0));
               float3 t2w2 = WorldNormalVector(i, float3(0,0,1));
               float3x3 t2w = float3x3(t2w0, t2w1, t2w2);
               float3 tang = mul( t2w, gVSSunDirection.xyz ).xyz;
            #endif

            float2 uvOffset = tang.xy * _VSShadowMap_TexelSize.xy * maxTreeHeight;
            float2 uv = config.uv + uvOffset;
            uvOffset /= taps;
            // we move down/back along the ray
            float heightStep = (1.0 / (float)taps);
            float currentHeight = 1;
            float maxHeight = 0;


            // do taps. 
            float dist = 1;
            for (int i = 0; i < taps; ++i)
            {
               uv -= uvOffset;
               currentHeight -= heightStep;
               half4 tex = tex2D(_VSShadowMap, uv);
               half top = tex.r;
               half bottom = 0.13; // hard coded min tree hight for now, use tex.g to see issue with dynamic.
               if (top > currentHeight && bottom < currentHeight)
               {
                  maxHeight = 1;
                  dist = i * heightStep;
               }
            }


            if (maxHeight > 0)
            {
               float fade = saturate((camDist - _VSShadowMapFadeScale.x) / max(_VSShadowMapFadeScale.y, 0.01));
               half shadow = fade * _VSShadowMapOffsetStrength.z * dist;
               shadow *= saturate(gVSSunDirection.w);
               o.Occlusion = saturate(o.Occlusion - shadow);
               o.Albedo = saturate(o.Albedo - shadow * _VSShadowMapOffsetStrength.w * gVSSunSettings.x * o.Albedo);
               o.Smoothness = saturate(o.Smoothness - shadow);
               o.Normal.xy *= (1-shadow);
            }


         #endif
      }
